ing) / (float)canvasSize.y);
            pivot *= -1f;

            Vector2 alignmentPos;
            if (alignment == SpriteAlignment.Custom)
                alignmentPos = customPivot;
            else
                alignmentPos = PivotAlignmentToVector(alignment);

            pivot.x += alignmentPos.x;
            pivot.y += alignmentPos.y;

            pivot.x *= scaleX;
            pivot.y *= scaleY;

            return pivot;
        }

        public static Vector2 PivotAlignmentToVector(SpriteAlignment alignment)
        {
            switch (alignment)
            {
                case SpriteAlignment.Center:
                    return new Vector2(0.5f, 0.5f);
                case SpriteAlignment.TopLeft:
                    return new Vector2(0f, 1f);
                case SpriteAlignment.TopCenter:
                    return new Vector2(0.5f, 1f);
                case SpriteAlignment.TopRight:
                    return new Vector2(1f, 1f);
                case SpriteAlignment.LeftCenter:
                    return new Vector2(0f, 0.5f);
                case SpriteAlignment.RightCenter:
                    return new Vector2(1f, 0.5f);
                case SpriteAlignment.BottomLeft:
                    return new Vector2(0f, 0f);
                case SpriteAlignment.BottomCenter:
                    return new Vector2(0.5f, 0f);
                case SpriteAlignment.BottomRight:
                    return new Vector2(1f, 0f);
                default:
                    return new Vector2(0f, 0f);
            }
        }

        public static string GetCellName(string baseName, int frameIndex, int noOfFrames)
        {
            if (noOfFrames == 1)
                return baseName;
            return $"{baseName}_Frame_{frameIndex}";
        }

        public static void DisposeIfCreated<T>(this NativeArray<T> arr) where T : struct
        {
            if (arr == default || !arr.IsCreated)
                return;
            var handle = NativeArrayUnsafeUtility.GetA